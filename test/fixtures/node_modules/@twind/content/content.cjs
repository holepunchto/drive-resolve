var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// index.ts
__export(exports, {
  content: () => content
});
var import_twind = __toModule(require("twind"));
var KNOWN_VALUES = new Set([
  "open-quote",
  "close-quote",
  "no-open-quote",
  "no-close-quote",
  "normal",
  "none",
  "inherit",
  "initial",
  "unset"
]);
var join = (parts) => parts.join("-");
var stringify = (parts) => {
  switch (parts[0]) {
    case "data":
      return `attr(${join(parts)})`;
    case "attr":
    case "counter":
      return `${parts[0]}(${join(parts.slice(1))})`;
    case "var":
      return `var(--${join(parts)})`;
    case void 0:
      return `attr(data-content)`;
    default:
      return JSON.stringify(join(parts));
  }
};
var content$ = (parts, {theme}) => {
  const value = Array.isArray(parts) ? join(parts) : parts;
  return {
    content: value && theme("content", [value], "") || KNOWN_VALUES.has(value) && value || (Array.isArray(parts) ? stringify(parts) : value)
  };
};
var content = (value, context) => Array.isArray(value) ? content$(value, context) : import_twind.directive(content$, value);
//# sourceMappingURL=content.cjs.map
